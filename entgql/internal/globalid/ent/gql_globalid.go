// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/contrib/entgql"
	"entgo.io/contrib/entgql/internal/globalid/ent/post"
	"entgo.io/contrib/entgql/internal/globalid/ent/user"
	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
	"github.com/hashicorp/go-multierror"
)

const (
	typePost = "post"
	typeUser = "user"
)

var typesToTable = map[string]string{
	typePost: post.Table,
	typeUser: user.Table,
}

// GlobalID is a global unique identifier that contains a a type and id.
type GlobalID struct {
	Type, ID     string
	resolvedType interface{}
}

// UnmarshalGQL implements the interface graphql.Unmarshaler.
func (g *GlobalID) UnmarshalGQL(v interface{}) error {
	id := v.(string)
	b, err := base64.URLEncoding.DecodeString(id)
	if err != nil {
		return err
	}
	tid := strings.Split(string(b), ":")
	if len(tid) != 2 {
		return fmt.Errorf("invalid global identifier format %q", b)
	}
	g.Type = tid[0]
	g.ID = tid[1]

	switch g.Type {
	case typePost:
		var rt uuid.UUID
		if err := rt.UnmarshalText([]byte(g.ID)); err != nil {
			return err
		}
		g.resolvedType = rt
		return nil
	case typeUser:
		rt, err := strconv.Atoi(g.ID)
		if err != nil {
			return err
		}
		g.resolvedType = rt
		return nil
	}
	return fmt.Errorf("could not unmarshal the Global ID")
}

// MarshalGQL implements the interface graphql.Marshaler.
func (g GlobalID) MarshalGQL(w io.Writer) {
	_, _ = w.Write([]byte(strconv.Quote(g.String())))
}

func (g GlobalID) String() string {
	id := fmt.Sprintf("%s:%s", g.Type, g.ID)
	return base64.StdEncoding.EncodeToString([]byte(id))
}

func (g *GlobalID) UUID() uuid.UUID {
	return g.resolvedType.(uuid.UUID)
}

func GlobalIDsPtrToUUIDs(ids []*GlobalID) []uuid.UUID {
	r := make([]uuid.UUID, 0, len(ids))
	for i := range ids {
		r = append(r, ids[i].UUID())
	}
	return r
}

func GlobalIDsToUUIDs(ids []GlobalID) []uuid.UUID {
	r := make([]uuid.UUID, 0, len(ids))
	for i := range ids {
		r = append(r, ids[i].UUID())
	}
	return r
}

func (g *GlobalID) Int() int {
	return g.resolvedType.(int)
}

func GlobalIDsPtrToInts(ids []*GlobalID) []int {
	r := make([]int, 0, len(ids))
	for i := range ids {
		r = append(r, ids[i].Int())
	}
	return r
}

func GlobalIDsToInts(ids []GlobalID) []int {
	r := make([]int, 0, len(ids))
	for i := range ids {
		r = append(r, ids[i].Int())
	}
	return r
}

// GlobalID returns the global identifier for the given Post node.
func (po *Post) GlobalID() GlobalID {
	return GlobalID{Type: typePost, ID: fmt.Sprintf("%s", po.ID), resolvedType: po.ID}
}

// NewPostGlobalID creates a global identifier for the given Post node.
func NewPostGlobalID(id uuid.UUID) GlobalID {
	return GlobalID{Type: typePost, ID: fmt.Sprintf("%s", id), resolvedType: id}
}

// GlobalID returns the global identifier for the given User node.
func (u *User) GlobalID() GlobalID {
	return GlobalID{Type: typeUser, ID: fmt.Sprintf("%d", u.ID), resolvedType: u.ID}
}

// NewUserGlobalID creates a global identifier for the given User node.
func NewUserGlobalID(id int) GlobalID {
	return GlobalID{Type: typeUser, ID: fmt.Sprintf("%d", id), resolvedType: id}
}

func (c *Client) FromGlobalID(ctx context.Context, r GlobalID) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(r.String()))
		}
	}()
	switch r.Type {
	case typePost:
		id := r.UUID()
		n, err := c.Post.Query().
			Where(post.ID(id)).
			CollectFields(ctx, "Post").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case typeUser:
		id := r.Int()
		n, err := c.User.Query().
			Where(user.ID(id)).
			CollectFields(ctx, "User").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder of type %q: %w", r.Type, errNodeInvalidID)
	}
}

func (c *Client) FromGlobalIDs(ctx context.Context, ids []*GlobalID) (_ []Noder, err error) {
	switch len(ids) {
	case 1:
		noder, err := c.FromGlobalID(ctx, *ids[0])
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}
	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	types := make(map[string][]*GlobalID)
	id2idx := make(map[GlobalID][]int, len(ids))
	for i, id := range ids {
		if id == nil {
			continue
		}
		types[id.Type] = append(types[id.Type], id)
		id2idx[*id] = append(id2idx[*id], i)
	}

	for typ, ids := range types {
		nodes, err := c.nodes(ctx, typ, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[*id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[*id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) nodes(ctx context.Context, typ string, rs []*GlobalID) ([]Noder, error) {
	noders := make([]Noder, len(rs))
	switch typ {
	case typePost:
		ids := make([]uuid.UUID, len(rs))
		for i := range ids {
			id := rs[i].UUID()
			ids[i] = id
		}
		idmap := make(map[uuid.UUID][]*Noder, len(ids))
		for i, id := range ids {
			idmap[id] = append(idmap[id], &noders[i])
		}
		nodes, err := c.Post.Query().
			Where(post.IDIn(ids...)).
			CollectFields(ctx, "Post").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case typeUser:
		ids := make([]int, len(rs))
		for i := range ids {
			id := rs[i].Int()
			ids[i] = id
		}
		idmap := make(map[int][]*Noder, len(ids))
		for i, id := range ids {
			idmap[id] = append(idmap[id], &noders[i])
		}
		nodes, err := c.User.Query().
			Where(user.IDIn(ids...)).
			CollectFields(ctx, "User").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from type %q: %w", typ, errNodeInvalidID)
	}
	return noders, nil
}
