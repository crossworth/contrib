// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"

	"entgo.io/contrib/entgql/internal/globalid/ent/post"
	"entgo.io/contrib/entgql/internal/globalid/ent/predicate"
	"entgo.io/contrib/entgql/internal/globalid/ent/user"
)

// PostWhereInput represents a where input for filtering Post queries.
type PostWhereInput struct {
	Not *PostWhereInput   `json:"not,omitempty"`
	Or  []*PostWhereInput `json:"or,omitempty"`
	And []*PostWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *GlobalID  `json:"id,omitempty"`
	IDNEQ   *GlobalID  `json:"idNEQ,omitempty"`
	IDIn    []GlobalID `json:"idIn,omitempty"`
	IDNotIn []GlobalID `json:"idNotIn,omitempty"`
	IDGT    *GlobalID  `json:"idGT,omitempty"`
	IDGTE   *GlobalID  `json:"idGTE,omitempty"`
	IDLT    *GlobalID  `json:"idLT,omitempty"`
	IDLTE   *GlobalID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
}

// Filter applies the PostWhereInput filter on the PostQuery builder.
func (i *PostWhereInput) Filter(q *PostQuery) (*PostQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering posts.
// An error is returned if the input is empty or invalid.
func (i *PostWhereInput) P() (predicate.Post, error) {
	var predicates []predicate.Post
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, post.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Post, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, post.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Post, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, post.And(and...))
	}

	if i.ID != nil {
		predicates = append(predicates, post.IDEQ(i.ID.UUID()))
	}

	if i.IDNEQ != nil {
		predicates = append(predicates, post.IDNEQ(i.IDNEQ.UUID()))
	}

	if i.IDIn != nil {
		predicates = append(predicates, post.IDIn(GlobalIDsToUUIDs(i.IDIn)...))
	}

	if i.IDNotIn != nil {
		predicates = append(predicates, post.IDNotIn(GlobalIDsToUUIDs(i.IDNotIn)...))
	}

	if i.IDGT != nil {
		predicates = append(predicates, post.IDGT(i.IDGT.UUID()))
	}

	if i.IDGTE != nil {
		predicates = append(predicates, post.IDGTE(i.IDGTE.UUID()))
	}

	if i.IDLT != nil {
		predicates = append(predicates, post.IDLT(i.IDLT.UUID()))
	}

	if i.IDLTE != nil {
		predicates = append(predicates, post.IDLTE(i.IDLTE.UUID()))
	}
	if i.Name != nil {
		predicates = append(predicates, post.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, post.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, post.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, post.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, post.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, post.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, post.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, post.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, post.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, post.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, post.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, post.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, post.NameContainsFold(*i.NameContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("empty predicate PostWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return post.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Not *UserWhereInput   `json:"not,omitempty"`
	Or  []*UserWhereInput `json:"or,omitempty"`
	And []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *GlobalID  `json:"id,omitempty"`
	IDNEQ   *GlobalID  `json:"idNEQ,omitempty"`
	IDIn    []GlobalID `json:"idIn,omitempty"`
	IDNotIn []GlobalID `json:"idNotIn,omitempty"`
	IDGT    *GlobalID  `json:"idGT,omitempty"`
	IDGTE   *GlobalID  `json:"idGTE,omitempty"`
	IDLT    *GlobalID  `json:"idLT,omitempty"`
	IDLTE   *GlobalID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(i.ID.Int()))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(i.IDNEQ.Int()))
	}
	if i.IDIn != nil {
		predicates = append(predicates, user.IDIn(GlobalIDsToInts(i.IDIn)...))
	}
	if i.IDNotIn != nil {
		predicates = append(predicates, user.IDNotIn(GlobalIDsToInts(i.IDNotIn)...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(i.IDGT.Int()))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(i.IDGTE.Int()))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(i.IDLT.Int()))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(i.IDLTE.Int()))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("empty predicate UserWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
