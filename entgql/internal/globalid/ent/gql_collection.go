// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (po *PostQuery) CollectFields(ctx context.Context, satisfies ...string) *PostQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		po = po.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return po
}

func (po *PostQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *PostQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "user":
			po = po.WithUser(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return po
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "post":
			u = u.WithPost(func(query *PostQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return u
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (v *VideoQuery) CollectFields(ctx context.Context, satisfies ...string) *VideoQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		v = v.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return v
}

func (v *VideoQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *VideoQuery {
	return v
}
