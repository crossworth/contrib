{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "gql_node" }}
    {{ $pkg := base $.Config.Package }}
    {{ template "header" $ }}

    {{ if ne $.Storage.Name "sql" }}
        {{ fail "node requires SQL storage" }}
    {{ end }}

    {{ $gqlNodes := filterNodes $.Nodes }}

    {{ $idType := $.IDType }}
    {{ $idTypeStr := print $.IDType }}
    {{ $usingGlobalID := false }}

    {{ range $n := $.Nodes }}
        {{ if $n.ID.Annotations.EntGQL.GlobalID }}
            {{ $usingGlobalID = true }}
        {{ else }}
            {{ if $usingGlobalID }}
                {{ fail "all ids should have entgql.GlobalID() annotation" }}
            {{ end }}
        {{ end }}
    {{ end }}

    {{ if and $usingGlobalID (hasTemplate "gql_globalid") }}
        {{ $idTypeStr = "GlobalID" }}
    {{ end }}

    {{ if and (gt (len $gqlNodes) 0) (not $usingGlobalID) }}
        {{ $idType = (index $gqlNodes 0).ID.Type }}
        {{ range $n := (slice $.Nodes 1) }}
            {{ if ne $idType.Type $n.ID.Type.Type }}
                {{ fail "node does not support multiple id types"  }}
            {{ end }}
        {{ end }}
    {{ end }}

    import (
    {{- range $n := $.Nodes }}
        "{{ $.Config.Package }}/{{ $n.Package }}"
    {{- end }}
    {{- with $package := $idType.PkgPath }}
        "{{ $package }}"
    {{- end }}
    )

    import (
    "entgo.io/ent/dialect/sql"
    "entgo.io/ent/dialect/sql/schema"
    "entgo.io/contrib/entgql"
    "github.com/99designs/gqlgen/graphql"
    "github.com/hashicorp/go-multierror"
    "golang.org/x/sync/semaphore"
    )

    {{ if $usingGlobalID }}
        // typesToTable map the GlobalID types to the table names.
        var typesToTable = map[string]string{
        {{- range $n := $.Nodes }}
            type{{ $n.Name }}: {{lower $n.Name }}.Table,
        {{- end }}
        }
    {{ end }}

    // Noder wraps the basic Node method.
    type Noder interface {
    Node(context.Context) (*Node, error)
    }

    // Node in the graph.
    type Node struct {
    ID     {{ $idTypeStr }} `json:"id,omitempty"`// node id.
    Type   string   `json:"type,omitempty"`   // node type.
    Fields []*Field `json:"fields,omitempty"` // node fields.
    Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
    }

    // Field of a node.
    type Field struct {
    Type  string `json:"type,omitempty"`  // field type.
    Name  string `json:"name,omitempty"`  // field name (as in struct).
    Value string `json:"value,omitempty"` // stringified value.
    }

    // Edges between two nodes.
    type Edge struct {
    Type string   `json:"type,omitempty"` // edge type.
    Name string   `json:"name,omitempty"` // edge name.
    IDs  []{{ $idTypeStr }} `json:"ids,omitempty"`  // node ids (where this edge point to).
    }

    {{/* loop over all types and add implement the Node interface. */}}
    {{ range $n := $gqlNodes }}
        {{ $receiver := $n.Receiver }}
        func ({{ $receiver }} *{{ $n.Name }}) Node(ctx context.Context) (node *Node, err error) {
        node = &Node{
        ID: {{ if $usingGlobalID }}{{ $receiver }}.GlobalID(){{ else }}{{ $receiver }}.ID{{ end }},
        Type: "{{ $n.Name }}",
        Fields: make([]*Field, {{ len $n.Fields }}),
        Edges: make([]*Edge, {{ len (filterEdges $n.Edges) }}),
        }
        {{- with filterFields $n.Fields }}
            var buf []byte
            {{- range $i, $f := filterFields $n.Fields }}
                if buf, err = json.Marshal({{ $receiver }}.{{ pascal $f.Name }}); err != nil {
                return nil, err
                }
                node.Fields[{{ $i }}] = &Field{
                Type:  "{{ $f.Type }}",
                Name:  "{{ $f.Name }}",
                Value: string(buf),
                }
            {{- end }}
        {{- end }}
        {{- with filterEdges $n.Edges }}
            {{- range $i, $e := filterEdges $n.Edges }}
                node.Edges[{{ $i }}] = &Edge{
                Type: "{{ $e.Type.Name }}",
                Name: "{{ $e.Name }}",
                }
                err = {{ $receiver }}.{{ print "Query" (pascal $e.Name) }}().
                Select({{ $e.Type.Package }}.FieldID).
                Scan(ctx, &node.Edges[{{ $i }}].IDs)
                if err != nil {
                return nil, err
                }
            {{- end }}
        {{- end }}
        return node, nil
        }
    {{ end }}

    {{/* Add the node api to the client */}}
    func (c *Client) Node(ctx context.Context, id {{ $idTypeStr }}) (*Node, error) {
    n, err := c.Noder(ctx, id)
    if err != nil {
    return nil, err
    }
    return n.Node(ctx)
    }

    var errNodeInvalidID = &NotFoundError{"node"}

    // NodeOption allows configuring the Noder execution using functional options.
    type NodeOption func(*nodeOptions)

    // WithNodeType sets the node Type resolver function (i.e. the table to query).
    // If was not provided, the table will be derived from the universal-id
    // configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
    func WithNodeType(f func(context.Context, {{ $idTypeStr }}) (string, error)) NodeOption {
    return func(o *nodeOptions) {
    o.nodeType = f
    }
    }

    // WithFixedNodeType sets the Type of the node to a fixed value.
    func WithFixedNodeType(t string) NodeOption {
    return WithNodeType(func(context.Context, {{ $idTypeStr }}) (string, error) {
    return t, nil
    })
    }

    type nodeOptions struct {
    nodeType func(context.Context, {{ $idTypeStr }}) (string, error)
    }

    func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
    nopts := &nodeOptions{}
    for _, opt := range opts {
    opt(nopts)
    }
    {{ if $usingGlobalID | not }}
        if nopts.nodeType == nil {
        nopts.nodeType = func(ctx context.Context, id {{ $idTypeStr }}) (string, error) {
        {{- if $idType.Numeric }}
            return c.tables.nodeType(ctx, c.driver, id)
        {{- else }}
            return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
        {{- end }}
        }
        }
    {{ end -}}
    return nopts
    }

    // Noder returns a Node by its id. If the NodeType was not provided, it will
    // be derived from the id value according to the universal-id configuration.
    //
    //        c.Noder(ctx, id)
    //        c.Noder(ctx, id, ent.WithNodeType(pet.Table))
    //
    func (c *Client) Noder(ctx context.Context, id {{ $idTypeStr }}, opts ...NodeOption) (_ Noder, err error) {
    defer func() {
    if IsNotFound(err) {
    err = multierror.Append(err, entgql.ErrNodeNotFound(id))
    }
    }()
    {{ if $usingGlobalID -}}
        return c.noder(ctx, id.Type, id)
    {{- else }}
        table, err := c.newNodeOpts(opts).nodeType(ctx, id)
        if err != nil {
        return nil, err
        }
        return c.noder(ctx, table, id)
    {{ end }}
    }

    func (c *Client) noder(ctx context.Context, table string, id {{ $idTypeStr }}) (Noder, error) {
    {{- if $usingGlobalID }}
        table = typesToTable[table]
    {{ end -}}
    switch table {
    {{- range $n := $gqlNodes }}
        {{- $typeName :=  $n.ID.Type.Type.String }}
        {{ if $n.ID.Type.RType }}
            {{- $typeName = $n.ID.Type.RType.Name -}}
        {{- end -}}
        case {{ $n.Package }}.Table:
        n, err := c.{{ $n.Name }}.Query().
        Where({{ $n.Package }}.ID({{if $usingGlobalID }}id.{{ pascal $typeName }}(){{ else }}id{{ end }})).
        {{- if hasTemplate "gql_collection" }}
            CollectFields(ctx, "{{ $n.Name }}").
        {{- end }}
        Only(ctx)
        if err != nil {
        return nil, err
        }
        return n, nil
    {{- end }}
    default:
    return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
    }
    }

    func (c *Client) Noders(ctx context.Context, ids []{{if $usingGlobalID }}*{{end}}{{ $idTypeStr }}, opts ...NodeOption) ([]Noder, error) {
    switch len(ids) {
    case 1:
    noder, err := c.Noder(ctx, {{if $usingGlobalID }}*{{end}}ids[0], opts...)
    if err != nil {
    return nil, err
    }
    return []Noder{noder}, nil
    case 0:
    return []Noder{}, nil
    }

    noders := make([]Noder, len(ids))
    errors := make([]error, len(ids))
    tables := make(map[string][]{{ $idTypeStr }})
    id2idx := make(map[{{ $idTypeStr }}][]int, len(ids))
    {{ if $usingGlobalID | not -}}
        nopts := c.newNodeOpts(opts)
    {{ end -}}
    for i, id := range ids {
    {{ if $usingGlobalID -}}
        table := id.Type
    {{- else }}
        table, err := nopts.nodeType(ctx, id)
        if err != nil {
        errors[i] = err
        continue
        }
    {{ end }}
    tables[table] = append(tables[table], {{if $usingGlobalID }}*{{end}}id)
    id2idx[{{if $usingGlobalID }}*{{end}}id] = append(id2idx[{{if $usingGlobalID }}*{{end}}id], i)
    }

    for table, ids := range tables {
    nodes, err := c.noders(ctx, table, ids)
    if err != nil {
    for _, id := range ids {
    for _, idx := range id2idx[id] {
    errors[idx] = err
    }
    }
    } else {
    for i, id := range ids {
    for _, idx := range id2idx[id] {
    noders[idx] = nodes[i]
    }
    }
    }
    }

    for i, id := range ids {
    if errors[i] == nil {
    if noders[i] != nil {
    continue
    }
    errors[i] = entgql.ErrNodeNotFound(id)
    } else if IsNotFound(errors[i]) {
    errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
    }
    ctx := graphql.WithPathContext(ctx,
    graphql.NewPathWithIndex(i),
    )
    graphql.AddError(ctx, errors[i])
    }
    return noders, nil
    }

    func (c *Client) noders(ctx context.Context, table string, ids []{{ $idTypeStr }}) ([]Noder, error) {
    noders := make([]Noder, len(ids))
    idmap := make(map[{{ $idTypeStr }}][]*Noder, len(ids))
    for i, id := range ids {
    idmap[id] = append(idmap[id], &noders[i])
    }
    {{ if $usingGlobalID -}}
        table = typesToTable[table]
    {{ end -}}
    switch table {
    {{- range $n := $gqlNodes }}
        {{- $typeName :=  $n.ID.Type.Type.String }}
        {{ if $n.ID.Type.RType }}
            {{- $typeName = $n.ID.Type.RType.Name -}}
        {{- end -}}
        case {{ $n.Package }}.Table:
        nodes, err := c.{{ $n.Name }}.Query().
        Where({{ $n.Package }}.IDIn({{if $usingGlobalID }}GlobalIDsTo{{ pascal $typeName}}s(ids){{else}}ids{{end}}...)).
        {{- if hasTemplate "gql_collection" }}
            CollectFields(ctx, "{{ $n.Name }}").
        {{- end }}
        All(ctx)
        if err != nil {
        return nil, err
        }
        for _, node := range nodes {
        for _, noder := range idmap[{{if $usingGlobalID }}node.GlobalID(){{ else }}node.ID{{ end }}] {
        *noder = node
        }
        }
    {{- end }}
    default:
    return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
    }
    return noders, nil
    }

    type tables struct {
    once  sync.Once
    sem   *semaphore.Weighted
    value atomic.Value
    }

    {{ if and $idType.Numeric ($usingGlobalID | not) }}
        func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id {{ $idType }}) (string, error) {
        tables, err := t.Load(ctx, drv)
        if err != nil {
        return "", err
        }
        idx := int(id/(1<<32 - 1))
        if idx < 0 || idx >= len(tables) {
        return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
        }
        return tables[idx], nil
        }

        func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
        if tables := t.value.Load(); tables != nil {
        return tables.([]string), nil
        }
        t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
        if err := t.sem.Acquire(ctx, 1); err != nil {
        return nil, err
        }
        defer t.sem.Release(1)
        if tables := t.value.Load(); tables != nil {
        return tables.([]string), nil
        }
        tables, err := t.load(ctx, drv)
        if err == nil {
        t.value.Store(tables)
        }
        return tables, err
        }

        func (*tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
        rows := &sql.Rows{}
        query, args := sql.Dialect(drv.Dialect()).
        Select("type").
        From(sql.Table(schema.TypeTable)).
        OrderBy(sql.Asc("id")).
        Query()
        if err := drv.Query(ctx, query, args, rows); err != nil {
        return nil, err
        }
        defer rows.Close()
        var tables []string
        return tables, sql.ScanSlice(rows, &tables)
        }
    {{ end }}
{{ end }}

{{ define "client/fields/additional" }}
    {{- if $.IDType.Numeric }}
        // additional fields for node api
        tables tables
    {{- end }}
{{ end }}
